{"version":3,"file":"ExpoImage.web.js","sourceRoot":"","sources":["../src/ExpoImage.web.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAQ1B,OAAO,EAAE,sBAAsB,EAAE,MAAM,SAAS,CAAC;AAEjD,SAAS,UAAU,CAAC,KAAsB;IACxC,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;IAC1C,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC9B,OAAO,YAAY,CAAC;KACrB;IACD,OAAO,GAAG,YAAY,IAAI,CAAC;AAC7B,CAAC;AAID,SAAS,oCAAoC,CAAC,eAAsC;IAClF,MAAM,gBAAgB,GAAG,CACvB,OAAO,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,eAAe,CAC9B,CAAC;IAEpE,IAAI,CAAC,gBAAgB,EAAE;QACrB,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,gBAAgB,CAAC,GAAG,IAAI,IAAI,IAAI,gBAAgB,CAAC,MAAM,IAAI,IAAI,EAAE;QACnE,gBAAgB,CAAC,GAAG,GAAG,KAAK,CAAC;KAC9B;IACD,IAAI,gBAAgB,CAAC,IAAI,IAAI,IAAI,IAAI,gBAAgB,CAAC,KAAK,IAAI,IAAI,EAAE;QACnE,gBAAgB,CAAC,IAAI,GAAG,KAAK,CAAC;KAC/B;IAED,OAAO,CACL,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;SAC/B,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;QACX,IAAI,GAAG,IAAI,gBAAgB,EAAE;YAC3B,OAAO,GAAG,GAAG,IAAI,UAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;SACtD;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;SACD,IAAI,CAAC,GAAG,CAAC,IAAI,SAAS,CAC1B,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,OAAO,UAAU,SAAS,CAAC,EAChC,MAAM,EACN,UAAU,EACV,eAAe,EACf,MAAM,EACN,WAAW,EACX,SAAS,EACT,OAAO,EACP,GAAG,KAAK,EACS;IACjB,MAAM,EAAE,WAAW,EAAE,eAAe,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;IAE7F,OAAO,CACL;QACE,iCACE,KAAK,EAAE;gBACL,QAAQ,EAAE,QAAQ;gBAClB,GAAG,KAAK;aACT;YACD,6BACE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EACrB,KAAK,EAAE;oBACL,KAAK,EAAE,MAAM;oBACb,MAAM,EAAE,MAAM;oBACd,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC;oBAChC,eAAe,EAAE,eAAe,EAAE,QAAQ,EAAE;oBAC5C,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE;oBAChC,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE;oBACpC,SAAS,EAAE,UAAU;oBACrB,cAAc,EAAE,oCAAoC,CAAC,eAAe,CAAC;iBACtE,GACD,CACM,CACT,CACJ,CAAC;AACJ,CAAC","sourcesContent":["import React from 'react';\n\nimport {\n  ImageContentPosition,\n  ImageContentPositionObject,\n  ImageNativeProps,\n  PositionValue,\n} from './Image.types';\nimport { resolveContentPosition } from './utils';\n\nfunction ensureUnit(value: string | number) {\n  const trimmedValue = String(value).trim();\n  if (trimmedValue.endsWith('%')) {\n    return trimmedValue;\n  }\n  return `${trimmedValue}px`;\n}\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\n\nfunction getObjectPositionFromContentPosition(contentPosition?: ImageContentPosition): string {\n  const resolvedPosition = (\n    typeof contentPosition === 'string' ? resolveContentPosition(contentPosition) : contentPosition\n  ) as Record<KeysOfUnion<ImageContentPositionObject>, PositionValue>;\n\n  if (!resolvedPosition) {\n    return '50% 50%';\n  }\n  if (resolvedPosition.top == null || resolvedPosition.bottom == null) {\n    resolvedPosition.top = '50%';\n  }\n  if (resolvedPosition.left == null || resolvedPosition.right == null) {\n    resolvedPosition.left = '50%';\n  }\n\n  return (\n    ['top', 'bottom', 'left', 'right']\n      .map((key) => {\n        if (key in resolvedPosition) {\n          return `${key} ${ensureUnit(resolvedPosition[key])}`;\n        }\n        return '';\n      })\n      .join(' ') || '50% 50%'\n  );\n}\n\nexport default function ExpoImage({\n  source,\n  contentFit,\n  contentPosition,\n  onLoad,\n  onLoadStart,\n  onLoadEnd,\n  onError,\n  ...props\n}: ImageNativeProps) {\n  const { aspectRatio, backgroundColor, transform, borderColor, ...style } = props.style ?? {};\n\n  return (\n    <>\n      <picture\n        style={{\n          overflow: 'hidden',\n          ...style,\n        }}>\n        <img\n          src={source?.[0]?.uri}\n          style={{\n            width: '100%',\n            height: '100%',\n            aspectRatio: String(aspectRatio),\n            backgroundColor: backgroundColor?.toString(),\n            transform: transform?.toString(),\n            borderColor: borderColor?.toString(),\n            objectFit: contentFit,\n            objectPosition: getObjectPositionFromContentPosition(contentPosition),\n          }}\n        />\n      </picture>\n    </>\n  );\n}\n"]}